---
- name: make sure that the i3 package is not installed (i3 without gaps)
  become: yes
  package: name="i3*" state=absent
  tags: ui

- name: pre-installation routines & configuration files
  block:
    - name: detect if i3-gaps is already installed
      shell: command -v i3 >/dev/null 2>&1
      register: cmd_exists_i3_gaps
      ignore_errors: yes

    - name: detect if light is already installed
      shell: command -v light >/dev/null 2>&1
      register: cmd_exists_light
      ignore_errors: yes

    - name: create i3 config directory
      file:
        path: "{{ i3_config_dir }}"
        state: directory

    - name: copy the config file
      copy:
        src: "{{ role_path }}/files/config"
        dest: "{{ i3_config_file }}"

    - name: copy the shell scripts
      copy:
        src: "{{ role_path }}/files/{{ item }}"
        dest: "{{ user_bin_dir }}/{{ item }}"
        owner: "{{ ansible_env.USER }}"
        group: "{{ user_group }}"
        mode: 0700
        force: yes
      with_items:
      - screenshot.sh
      - i3exit.sh

    - name: insert the screenshot script location into the config file
      replace:
        path: "{{ i3_config_file }}"
        regexp: "{{ placeholder_screenshot_script }}"
        replace: "{{ screenshot_script }}"

    - name: insert the i3exit script location into the config file
      replace:
        path: "{{ i3_config_file }}"
        regexp: "{{ placeholder_i3_exit_script }}"
        replace: "{{ i3_exit_script }}"

    - name: "legacy : ensure that the old ~/.i3 config folder does not exist"
      file:
        path: "{{ ansible_env.HOME }}/.i3"
        state: absent

    - name: copy .Xresources
      copy:
        src: "{{ role_path }}/files/.Xresources"
        dest: "{{ ansible_env.HOME }}/.Xresources"
        owner: "{{ ansible_env.USER }}"
        group: "{{ user_group }}"
        mode: 0600
        force: yes

    - name: copy the .Xinstance file for the user to configure
      copy:
        src: "{{ role_path }}/files/.Xinstance"
        dest: "{{ ansible_env.HOME }}/.Xinstance"
        owner: "{{ ansible_env.USER }}"
        group: "{{ user_group }}"
        mode: 0600
        force: no

    - name: reload .Xresources
      command: xrdb .Xresources
      args:
        chdir: "{{ ansible_env.HOME }}"
  tags: [ui, ui-dotfiles]

- name: copy the custom xorg.conf
  become: yes
  copy:
    src: "{{ role_path }}/files/xorg.conf"
    dest: "/etc/X11/xorg.conf"
    owner: root
    group: root
    mode: 0644
  tags: [ui, dotfiles-root]

- name: i3-gaps and dependencies installation
  block:
    - name: install rofi, synaptics touchpad drivers
      become: yes
      package: name="{{ item }}" state=present
      with_items:
      - rofi
      - xserver-xorg-input-synaptics

    - name: install i3-gaps
      include_tasks: install-i3.yml
      when: cmd_exists_i3_gaps.rc > 0

    - name: install light
      include_tasks: install-light.yml
      when: cmd_exists_light.rc > 0

    - name: install i3-gaps requirements from source
      include_tasks: font-awesome.yml

    - name: install autorandr
      include_role:
        name: autorandr
  tags: ui

- name: install and/or configure polybar
  include_role:
    name: polybar
  tags: always
